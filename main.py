import tkinter as tk
import pygame

from b_conf import *
from logic_for_training import *
from voice_acting import play_chinese_text
from text_auto_editing import create_responsive_label

my_word_class = None
long = '______________________________'
new_file_name = None
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pygame –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
pygame.mixer.init()

# === –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ===
root = tk.Tk()
root.title("My Training 2.0")
root.geometry("1000x800")
root.configure(bg="#f0f0f0")

# –ß—Ç–æ–±—ã —Ñ—Ä–µ–π–º—ã —Ä–∞—Å—Ç—è–≥–∏–≤–∞–ª–∏—Å—å
root.grid_rowconfigure(0, weight=1)
root.grid_columnconfigure(0, weight=1)



# --- –°–æ–∑–¥–∞—ë–º —Ñ—Ä–µ–π–º—ã (—Å—Ç—Ä–∞–Ω–∏—Ü—ã) ---
main_frame = tk.Frame(root, bg="#f0f0f0")
training_choose_frame = tk.Frame(root, bg="#f0f0f0")
add_frame = tk.Frame(root, bg="#f0f0f0")

# –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ —Ñ—Ä–µ–π–º—ã –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ (0,0), –Ω–æ –≤–∏–¥–µ–Ω –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
for frame in (main_frame, training_choose_frame, add_frame):
    frame.grid(row=0, column=0, sticky="nsew")

# === –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü ===
def show_frame(frame):
    frame.tkraise()  # –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ñ—Ä–µ–π–º –Ω–∞–≤–µ—Ä—Ö (–¥–µ–ª–∞–µ—Ç –≤–∏–¥–∏–º—ã–º)

# === 1. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ===
tk.Label(main_frame, text="Choose from the menu", font=("Arial", 30), bg="#f0f0f0").pack(pady=20)
tk.Label(main_frame, text="ÈÄâÊã©ËèúÂçïÈ°π", font=("NSimSun", 25), bg="#f0f0f0").pack(pady=10)

# –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
tk.Button(
    main_frame,
    text="Training / ‰ªªÂä°ÂûãÁªÉ‰π†",
    **button_config,
    command=lambda: show_frame(training_choose_frame)
).pack(pady=30, padx=100, fill=tk.X)

tk.Button(
    main_frame,
    text="Add / Ê∑ªÂä†",
    **button_config2,
    command=lambda: show_frame(create_file_frame)
).pack(pady=30, padx=100, fill=tk.X)

# === 2. –°—Ç—Ä–∞–Ω–∏—Ü–∞ "Training" ===
tk.Label(training_choose_frame, text="Select a training type", font=("Arial", 24), bg="#f0f0f0").pack(pady=20)
tk.Label(training_choose_frame, text="ÈÄâÊã©ËÆ≠ÁªÉÁ±ªÂûã", font=("Arial", 18), bg="#f0f0f0").pack(pady=10)
my_list_of_files = training()

for file in my_list_of_files:
    tk.Button(
        training_choose_frame,
        text=file,
        **button_config_x,
        command=lambda f=file: making_training_page(f)
    ).pack(pady=10, padx=80, fill=tk.X)

# === 2.1 –°—Ç—Ä–∞–Ω–∏—Ü–∞ "Training" ===
def making_training_page(name_of_file, new = True):
    global my_word_class
    if new:
        my_word_class = Voc(name_of_file)
    training_frame = tk.Frame(root, bg="#f0f0f0")
    training_frame.grid(row=0, column=0, sticky="nsew")
    try:
        play_chinese_text(my_word_class.answer_hanzi)
    except:
        play_chinese_text("no audio file")
    tk.Button(training_frame, text="üîä", **button_play_hanzi_config,
              command=lambda: play_chinese_text(my_word_class.previous_hanzi)).pack(padx=15, pady=(10, 25))
    tk.Label(training_frame, text=my_word_class.answer_hanzi, font=("SimHei", 160), bg="#f0f0f0").pack(pady=(30,5))
    tk.Label(training_frame, text=my_word_class.answer_pinin, font=("Arial", 20), bg="#f0f0f0").pack(pady=(5, 10))
    my_word_class.inf_for_training_frame()
    tk.Label(training_frame, text=my_word_class.previous_question, font=("Arial", 10), bg="#f0f0f0").pack(pady=(5, 0))
    # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å)
    tk.Label(training_frame, text=long * 2, font=("Arial", 30), bg="#f0f0f0").pack(pady=0)
    create_responsive_label(training_frame,my_word_class.question)

    tk.Button(training_frame,text="–û–±–Ω–æ–≤–∏—Ç—å",**button_config_x,
              command=lambda f=file: making_training_page(f, new = False)).pack(pady=(0,5), padx=100, fill=tk.X)
    show_frame(training_frame)
    tk.Button(training_frame,text="Back",**button_config_x,
              command=lambda: show_frame(training_choose_frame)).pack(pady=(0,10), padx=100, fill=tk.X)

    training_frame.focus_set()  # –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏—à
    # –ü—Ä–æ–±–µ–ª ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–æ
    training_frame.bind("<space>", lambda f=file: making_training_page(f, new = False))
    # Escape ‚Äî –Ω–∞–∑–∞–¥
    training_frame.bind("<Escape>", lambda event: show_frame(training_choose_frame))
    # Enter ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ø—Ä–æ–±–µ–ª—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    training_frame.bind("<Return>", lambda f=file: making_training_page(f, new = False))
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–∏–Ω–¥–∏–Ω–≥–∏, —á—Ç–æ–±—ã GC –Ω–µ —É–¥–∞–ª–∏–ª
    training_frame.bindings = ["<space>", "<Escape>", "<Return>"]
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    tk.Button(training_choose_frame,text="Back / ËøîÂõû",**back_button_config,
          command=lambda: show_frame(main_frame)).pack(pady=40)
    show_frame(training_frame)

# === 4. –û–∫–Ω–æ: –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ===
create_file_frame = tk.Frame(root, bg="#f0f0f0")
create_file_frame.grid(row=0, column=0, sticky="nsew")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
tk.Label(
    create_file_frame,
    text="Adding words / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤",
    font=("Arial", 24),
    bg="#f0f0f0"
).pack(pady=40)


tk.Label(
    create_file_frame,
    text="File name / –ò–º—è —Ñ–∞–π–ª–∞:",
    font=("Arial", 16),
    bg="#f0f0f0"
).pack(pady=10)

# –ü–æ–ª–µ –≤–≤–æ–¥–∞
file_name_entry = tk.Entry(
    create_file_frame,
    font=("Arial", 18),
    width=30,
    justify="center"
)
file_name_entry.pack(pady=10, ipady=5)

# –ö–Ω–æ–ø–∫–∏
button_frame = tk.Frame(create_file_frame, bg="#f0f0f0")
button_frame.pack(pady=(400,30))

def on_ok_click():
    global new_file_name
    name = file_name_entry.get().strip()
    if not name:
        print("–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    new_file_name = name
    show_frame(fill_file_frame)
    fill_hanzi.focus_set()



# –ö–Ω–æ–ø–∫–∞ –û–ö
tk.Button(
    button_frame,
    text="OK / –ì–æ—Ç–æ–≤–æ",
    **button_config_x,
    command=on_ok_click
).pack(padx=15,pady=(0,25))

# –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
tk.Button(
    button_frame,
    text="Back / –ù–∞–∑–∞–¥",
    **back_button_config,
    command=lambda: show_frame(main_frame)
).pack(padx=15)


# === 4. –û–∫–Ω–æ: –≤–≤–æ–¥–∞ —Å–ª–æ–≤ ===
fill_file_frame = tk.Frame(root, bg="#f0f0f0")
fill_file_frame.grid(row=0, column=0, sticky="nsew")


# –ó–∞–≥–æ–ª–æ–≤–æ–∫
tk.Label(
    fill_file_frame,
    text="Adding words / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤",
    font=("Arial", 24),
    bg="#f0f0f0"
).pack(pady=40)


tk.Label(
    fill_file_frame,
    text="Hanzi",
    font=("Arial", 15),
    bg="#f0f0f0"
).pack(pady=10)
# –ü–æ–ª–µ –≤–≤–æ–¥–∞
fill_hanzi = tk.Entry(
    fill_file_frame,
    font=("Arial", 18),
    width=30,
    justify="center"
)
fill_hanzi.pack(pady=10, ipady=5)
tk.Label(
    fill_file_frame,
    text="Pinin",
    font=("Arial", 15),
    bg="#f0f0f0"
).pack(pady=10)
# –ü–æ–ª–µ –≤–≤–æ–¥–∞
fill_pinin = tk.Entry(
    fill_file_frame,
    font=("Arial", 18),
    width=30,
    justify="center"
)
fill_pinin.pack(pady=10, ipady=5)

tk.Label(
    fill_file_frame,
    text="Translate",
    font=("Arial", 15),
    bg="#f0f0f0"
).pack(pady=10)
# –ü–æ–ª–µ –≤–≤–æ–¥–∞
fill_translation = tk.Entry(
    fill_file_frame,
    font=("Arial", 18),
    width=30,
    justify="center"
)
fill_translation.pack(pady=10, ipady=5)


def on_ok_click():
    hanzi_name = fill_hanzi.get().strip()
    pinin_name = fill_pinin.get().strip()
    translstion_name = fill_translation.get().strip()
    if not hanzi_name or not pinin_name or not translstion_name:
        print("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return


    with open(os.path.join(get_path(), 'words', new_file_name), "a", encoding="utf-8") as file:
        file.write(''.join([hanzi_name,'/', pinin_name," ", translstion_name]) + "\n")
    print(''.join([hanzi_name,'/', pinin_name," ", translstion_name]))
    fill_hanzi.delete(0, tk.END)  # –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ
    fill_pinin.delete(0, tk.END)  # –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ
    fill_translation.delete(0, tk.END)  # –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ


# –ö–Ω–æ–ø–∫–∏
button_frame = tk.Frame(fill_file_frame, bg="#f0f0f0")
button_frame.pack(pady=(200,30))

# –ö–Ω–æ–ø–∫–∞ –û–ö
tk.Button(
    button_frame,
    text="OK / –ì–æ—Ç–æ–≤–æ",
    **button_config_x,
    command=on_ok_click
).pack(padx=15,pady=(10,25))

# –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
tk.Button(
    button_frame,
    text="Back / –ù–∞–∑–∞–¥",
    **back_button_config,
    command=lambda: show_frame(main_frame)
).pack(padx=15)

# === –ó–∞–ø—É—Å–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ===
show_frame(main_frame)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
root.mainloop()